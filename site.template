
lua_package_path "@@LUA_LIBRARY@@/?.lua;;";

server {
    listen                  @@EXT_PORT@@;
    server_name             _;
    server_name_in_redirect off;
    port_in_redirect        off;
    root                    /root/html;

    location / {
        set $upstream "";
        
        rewrite_by_lua '

            local resolver = require "resty.dns.resolver"

            function abort(reason, code)
                ngx.status = code
                ngx.say(reason)
                return code
            end

            local name   = "@@NAME@@"
            local dns, err  = resolver:new{
                nameservers = { "@@NAMESERVER@@" },
                retrans     = 2,
                timeout     = 300
            }
            if not dns then
                ngx.log(ngx.ERR, "failed to instantiate the resolver: " .. err)
                return abort("DNS error", 500)
            end
            
            ngx.log(ngx.ERR, "Querying about " .. name .. " to @@NAMESERVER@@")
            local records, err = dns:query(name)
            if not records then
                ngx.log(ngx.ERR, msg, "failed to query the DNS server: " .. err)
                return abort("Internal routing error", 500)
            end

            if records.errcode then
                -- error code meanings available in http://bit.ly/1ppRk24
                if records.errcode == 3 then
                    return abort("Not found", 404)
                else
                    ngx.log(ngx.ERR, msg, "DNS error #" .. records.errcode .. ": " .. records.errstr)
                    return abort("DNS error", 500)
                end
            end

            -- resolve the target to an IP
            local target_ip = dns:query(records[1].target)[1].address
            ngx.var.target = target_ip .. ":" .. "@@INT_PORT@@"
                                    
            -- TODO: use this caching mechanism:
            -- http://sosedoff.com/2012/06/11/dynamic-nginx-upstreams-with-lua-and-redis.html
            
            -- TODO: maybe we could connect to weaveDNS and wait for updates on the name...
        ';

        proxy_buffering             off;
        proxy_set_header            Host $host;
        proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect              off;
        proxy_connect_timeout       10;
        proxy_send_timeout          30;
        proxy_read_timeout          30;
        proxy_pass                  http://$upstream;
    }
}



